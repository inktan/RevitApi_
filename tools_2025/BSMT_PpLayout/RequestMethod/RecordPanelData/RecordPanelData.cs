using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.DB;
using Autodesk.Revit.DB.ExtensibleStorage;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;
using g3;
using goa.Common;
using goa.Common.g3InterOp;
using PubFuncWt;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BSMT_PpLayout
{
    class RecordPanelData : RequestMethod
    {

        internal RecordPanelData(UIApplication uiapp) : base(uiapp)
        {
        }

        internal override void Execute()
        {
        }
        /// <summary>
        /// Save一直存在
        /// </summary>
        internal void Save()
        {
            if (GlobalData.Instance.selViewNames.Count < 1)
                return;

            PanelData panelData = new PanelData();
            panelData.Read();

            InitialUIinter initialUIinter = new InitialUIinter(this.uiApp);
            List<ElementId> selBaseWallIds = initialUIinter.SelBsmtWallIds(); // UI获取所有地库填充区域id

            string dicKey = selBaseWallIds[0].ToString() + "PanelData";

            AutoGeneratedElementMgr autoGeneratedElementMgr = new AutoGeneratedElementMgr(this.doc, dicKey);

            //autoGeneratedElementMgr.SaveWithEmpty(this.doc, panelData.AllData);

            DataStorage ds = new FilteredElementCollector(doc)
                            .OfClass(typeof(DataStorage))
                            .First(x => x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema) != null
                            && x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema).IsValid()) as DataStorage;

            Entity en = ds.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema);
            var dic = en.Get<IDictionary<string, Entity>>("ElementListOfId");
            Entity en_list;
            bool b = dic.TryGetValue(dicKey, out en_list);
            if (!b)
                en_list = new Entity(SchemaTypes.ElementListOfId);

            List<string> list = panelData.AllData;
            en_list.Set<IList<string>>("ElementList", list);

            dic[dicKey] = en_list;
            en.Set<IDictionary<string, Entity>>("ElementListOfId", dic);
            using (Transaction trans = new Transaction(this.doc, "setEntity"))
            {
                trans.Start();
                ds.SetEntity(en);
                trans.Commit();
            }
        }
        /// <summary>
        /// Read按需存在 从entity将值读出来写入插件面板
        /// </summary>
        internal void Write()
        {
            if (GlobalData.Instance.selViewNames.Count < 1)
                return;

            InitialUIinter initialUIinter = new InitialUIinter(this.uiApp);
            List<ElementId> selBaseWallIds = initialUIinter.SelBsmtWallIds(); // UI获取所有地库填充区域id

            string dicKey = selBaseWallIds[0].ToString() + "PanelData";

            AutoGeneratedElementMgr autoGeneratedElementMgr = new AutoGeneratedElementMgr(this.doc, dicKey);
            List<string> strings = autoGeneratedElementMgr.ReadIds();

            if (strings.Count < 1)
                return;

            PanelData panelData = new PanelData();
            panelData.AllData = strings;
            panelData.Write();

        }
    }
}
