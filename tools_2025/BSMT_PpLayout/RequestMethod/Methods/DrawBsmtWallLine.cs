using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Autodesk.Revit.UI;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI.Selection;
using System.Diagnostics;
using PubFuncWt;
using g3;
using goa.Common;
using goa.Common.g3InterOp;
using Autodesk.Revit.DB.ExtensibleStorage;

namespace BSMT_PpLayout
{
    class DrawBsmtWallLine : RequestMethod
    {
        public DrawBsmtWallLine(UIApplication uiApp) : base(uiApp) { }

        internal override void Execute()
        {

            InitialUIinter initialUIinter = new InitialUIinter(this.uiApp);
            List<ElementId> selBaseWallIds = initialUIinter.SelBsmtWallIds(); // UI获取所有地库填充区域id
            List<ElemsViewLevel> elemsViewLevels = initialUIinter.ElemsViewLevels(); //一个视图对应一个层级

            List<string> eleIds = new List<string>();
            foreach (ElemsViewLevel elemsViewLevel in elemsViewLevels)// 遍历单个视图
            {
                View nowView = elemsViewLevel.View;

                foreach (Bsmt bsmt in elemsViewLevel.Bsmts)// 遍历单个地库
                {
                    if (!selBaseWallIds.Contains(bsmt.BsmtBound.Id))// 判断是否UI选择
                        continue;

                    // 删除上次记录的地库墙体（黑色填充区域）
                    AutoGeneratedElementMgr autoGeneratedElementMgr = new AutoGeneratedElementMgr(this.doc, bsmt.BsmtBound.Id.ToString());
                    List<string> deleIds = autoGeneratedElementMgr.ReadIds();
                    //autoGeneratedElementMgr.EmptyWthTrans(this.doc, bsmt.BsmtBound.Id.ToString());

                    // 记录本次墙体信息 该处墙体为
                    using (Transaction transaction = new Transaction(this.doc, "删除上一次记录的地库墙体信息"))
                    {
                        transaction.Start();

                        autoGeneratedElementMgr.Empty();

                        deleIds.ForEach(p =>
                        {
                            Element element = this.doc.GetElement(p);
                            if (element != null && element.IsValidObject)
                            {
                                this.doc.Delete(element.Id);
                            }
                        });
                        transaction.Commit();
                    }

                    try
                    {
                        string filledTypeName = "地库_墙体";
                        // 地库外墙
                        CurveLoop inner = bsmt.BsmtBound.Polygon2dInward.ToCurveLoop();
                        CurveLoop outter = bsmt.BsmtBound.Polygon2d.ToCurveLoop();
                        List<ElementId> elementIds = view.CreatRingFilledRegoin(this.doc, new List<CurveLoop>() { inner, outter }, filledTypeName, 0);
                        // 地库内墙

                        for (int i = 1; i < bsmt.BsmtBound.Polygon2ds.Count(); i++)
                        {
                            inner = bsmt.BsmtBound.Polygon2ds[i].ToCurveLoop();
                            outter = bsmt.BsmtBound.Polygon2ds[i].OutwardOffeet(GlobalData.Instance.bsmtWallThickness_num).ToCurveLoop();
                            List<ElementId> _elementIds = view.CreatRingFilledRegoin(this.doc, new List<CurveLoop>() { inner, outter }, filledTypeName, 0);
                            elementIds.AddRange(_elementIds);
                        }

                        elementIds.ForEach(p =>
                        {
                            eleIds.Add(this.doc.GetElement(p).UniqueId);
                        });
                    }
                    catch (Exception)
                    {
                        throw new NotImplementedException("请检查车道中心线是否设置正确");
                    }

                    //autoGeneratedElementMgr.Save(this.doc, eleIds);

                    DataStorage ds = new FilteredElementCollector(doc)
                             .OfClass(typeof(DataStorage))
                             .First(x => x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema) != null
                             && x.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema).IsValid()) as DataStorage;

                    Entity en = ds.GetEntity(SchemaTypes.AutoGeneratedElementMgrSchema);
                    var dic = en.Get<IDictionary<string, Entity>>("ElementListOfId");
                    Entity en_list;
                    bool b = dic.TryGetValue(bsmt.BsmtBound.Id.ToString(), out en_list);
                    if (!b)
                        en_list = new Entity(SchemaTypes.ElementListOfId);

                    List<string> list = eleIds;
                    en_list.Set<IList<string>>("ElementList", list);

                    dic[bsmt.BsmtBound.Id.ToString()] = en_list;
                    en.Set<IDictionary<string, Entity>>("ElementListOfId", dic);
                    using (Transaction trans = new Transaction(this.doc, "setEntity"))
                    {
                        trans.Start();
                        ds.SetEntity(en);
                        trans.Commit();
                    }

                    //Polygon2d wallLine = bsmt.BsmtBound.Polygon2dInward.OutwardOffeet(200.0.MilliMeterToFeet());

                    //WallType wallType = (new FilteredElementCollector(this.doc)).OfCategory(BuiltInCategory.OST_Walls).Where(p => p is WallType).Where(p => p.Name == "地库_剪力墙 400").FirstOrDefault() as WallType;

                    //using (Transaction trans = new Transaction(this.doc, "创建储藏室的墙体"))
                    //{
                    //    trans.DeleteErrOrWaringTaskDialog();
                    //    trans.Start();
                    //    if (wallType == null)
                    //    {
                    //        wallType = this.doc.NewWallType("地库_剪力墙 400", 400.0.MilliMeterToFeet());
                    //    }

                    //    wallLine.SegmentItr().ToList().ForEach(p =>
                    //    {
                    //        Wall wall = Wall.Create(this.doc, p.ToLine(), wallType.Id, this.view.GenLevel.Id, 100, 0.0, false, false);
                    //        eleIds.Add(wall.UniqueId);
                    //    });
                    //    trans.Commit();
                    //}

                }
            }

        }
    }
}
