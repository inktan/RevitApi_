using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.DB;
using Autodesk.Revit.DB.ExtensibleStorage;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;
using g3;
using goa.Common;
using goa.Common.g3InterOp;
using PubFuncWt;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BSMT_PpLayout
{
    class ChamferRoads : RequestMethod
    {
        public int MyProperty { get; set; }

        internal ChamferRoads(UIApplication uiapp) : base(uiapp)
        {
        }

        internal override void Execute()
        {

            AutoGeneratedElementMgr.Initialize(doc);

            if (GlobalData.Instance.wheChamfer)// 倒角 储存已存在的主车道中心线的端点信息
            {
                Execute_DirectChamfer();
            }
            else // 倒角复原
            {
                ChamferRestore();
            }
            //throw new NotImplementedException();
        }
        /// <summary>
        /// 出图倒角
        /// </summary>
        internal void Execute_DirectChamfer()
        {
            InitialUIinter initialUIinter = new InitialUIinter(this.uiApp);
            List<ElementId> selBaseWallIds = initialUIinter.SelBsmtWallIds(); // UI获取所有地库填充区域id
            List<ElemsViewLevel> elemsViewLevels = initialUIinter.ElemsViewLevels(); //一个视图对应一个层级

            foreach (ElemsViewLevel elemsViewLevel in elemsViewLevels)// 遍历单个视图
            {
                View nowView = elemsViewLevel.View;

                foreach (Bsmt bsmt in elemsViewLevel.Bsmts)// 遍历单个地库
                {
                    if (!selBaseWallIds.Contains(bsmt.BsmtBound.Id))// 判断是否UI选择
                        continue;
                    bsmt.Computer_VeRa();

                    OldRS oldRS = new OldRS(bsmt);

                    // 更新路径属性
                    oldRS.UpdatePathProperties();

                    // 提取倒角
                    List<List<Route>> seg2Pairs = ChamferSegPair(oldRS.Routes);// 倒角配对
                    List<Arc2d> arc2ds = BatchChamfer(seg2Pairs);// 获取所有的倒角线
                    CurveArray curveArray = new CurveArray();
                    arc2ds.ForEach(p =>
                    {
                        curveArray.Append(p.ToArc());
                    });

                    // 提取尽端圆圈
                    foreach (var item in oldRS.Routes)// 该路网已经全为打断后的路网
                    {
                        item.CalEndCirclePosition();

                        Segment2d seg2d = new Segment2d();
                        if (item.PathType == PathType.SingleEnd)// 尽端
                        {
                            // 判断是否与坡道相连

                            bool circleOrNot = true;
                            foreach (RevitEleVeRa revitEleVeRa in bsmt.InBoundEleVeRas)
                            {
                                Vector2d location = revitEleVeRa.LocVector2d;

                                if(item.EndPoint.Distance(location)< 2000.0.MilliMeterToFeet())
                                {
                                    circleOrNot = false;
                                }
                            }

                            if (circleOrNot)
                            {
                                Vector2d vector2d01 = item.EndCirclePosition01;
                                Arc circle = Arc.Create(vector2d01.ToXYZ(), GlobalData.Instance.EndCircleRadius_num, 0, Math.PI * 2, XYZ.BasisX, XYZ.BasisY);
                                curveArray.Append(circle);

                                // 01 拿掉尽端空间处的多余道路
                                seg2d = new Segment2d(vector2d01 - item.Direction * GlobalData.Instance.EndCircleRadius_num, item.NoEndPoint);
                                // 02 拿掉倒角处的多余道路
                                //if (seg2d.Length > GlobalData.Instance.ChamferRadius)
                                //{
                                //    seg2d = new Segment2d(seg2d.P0, seg2d.P1 + item.Direction * GlobalData.Instance.ChamferRadius);
                                //}
                            }
                            else// 不加圈圈
                            {
                                seg2d = item.Segment2d;
                            }
                        }
                        else if (item.PathType == PathType.BothEnds)// 双尽端
                        {
                            Vector2d vector2d01 = item.EndCirclePosition01;
                            Vector2d vector2d02 = item.EndCirclePosition02;
                            Arc circle01 = Arc.Create(vector2d01.ToXYZ(), GlobalData.Instance.EndCircleRadius_num, 0, Math.PI * 2, XYZ.BasisX, XYZ.BasisY);
                            Arc circle02 = Arc.Create(vector2d02.ToXYZ(), GlobalData.Instance.EndCircleRadius_num, 0, Math.PI * 2, XYZ.BasisX, XYZ.BasisY);
                            curveArray.Append(circle01);
                            curveArray.Append(circle02);

                            seg2d = new Segment2d(vector2d01 - item.Direction * GlobalData.Instance.EndCircleRadius_num, vector2d02 + item.Direction * GlobalData.Instance.EndCircleRadius_num);
                        }
                        else// 没有尽端
                        {
                            //if (item.Segment2d.Length > GlobalData.Instance.ChamferRadius * 2)
                            //{
                            //    seg2d = item.Segment2d.TwoWayExtension((-1.0) * GlobalData.Instance.ChamferRadius);
                            //}
                            //else
                            //{
                            //    seg2d = item.Segment2d;
                            //}
                            seg2d = item.Segment2d;
                        }
                        if (seg2d.Length > Precision_.TheShortestDistance)
                        {
                            curveArray.Append(seg2d.ToLine());
                        }
                    }
                    // 先删除，再创建
                    // 记录并删除旧的路网体系，==> 优化方向 - 区分道路层级
                    List<XYZ> xYZs = oldRS.RoutePoints;

                    SetEntity(bsmt.BsmtBound.Ele, oldRS.RoutePoints);
                    // 删除倒角前的路网体系
                    // 使用bsmt删除
                    //this.doc.DelEleIds(oldRS.EleIds);
                    bsmt.DelRevitLines();
                    // 创建事务
                    GraphicsStyle graphicsStyle = this.doc.GetGraphicsStyleByName("地库_主车道中心线");
                    this.doc.DrawDetailCurvesWithNewTrans(curveArray, graphicsStyle);
                }
            }
        }
        /// <summary>
        /// 倒角配对
        /// </summary>
        /// <returns></returns>
        internal List<List<Route>> ChamferSegPair(List<Route> allBeakSeg2ds)
        {
            int count = allBeakSeg2ds.Count;

            //【】基于相交判断，判断配对情况 需要包装segment2d为class
            List<List<Route>> seg2Pairs = new List<List<Route>>();
            for (int i = 0; i < count; i++)
            {
                Route route01 = allBeakSeg2ds[i];
                Segment2d seg2d01 = route01.Segment2d;
                if (route01.PathType == PathType.SingleEnd)
                {
                    if (seg2d01.Length < GlobalData.Instance.ChamferRadius_num + GlobalData.Instance.EndCirclePosition_num + GlobalData.Instance.EndCircleRadius_num)
                    {
                        continue;
                    }
                }

                for (int j = 0; j < count; j++)
                {
                    if (j > i)
                    {
                        Route route02 = allBeakSeg2ds[j];
                        Segment2d seg2d02 = route02.Segment2d;
                        if (route02.PathType == PathType.SingleEnd)
                        {
                            if (seg2d02.Length < GlobalData.Instance.ChamferRadius_num + GlobalData.Instance.EndCirclePosition_num + GlobalData.Instance.EndCircleRadius_num)
                            {
                                continue;
                            }
                        }

                        double dot = seg2d01.Direction.Dot(seg2d02.Direction);
                        if (!dot.EqualZreo())//【】不垂直
                        {
                            continue;
                        }
                        if (seg2d01.Length <= Precision_.TheShortestDistance || seg2d02.Length <= Precision_.TheShortestDistance)
                        {
                            continue;
                        }

                        Segment2d _segment2d01 = seg2d01.TwoWayExtension(1.0);
                        Segment2d _segment2d02 = seg2d02.TwoWayExtension(1.0);

                        IntrSegment2Segment2 intrSegment2Segment2 = new IntrSegment2Segment2(_segment2d01, _segment2d02);
                        intrSegment2Segment2.Compute();
                        if (intrSegment2Segment2.Quantity == 1)
                        {
                            seg2Pairs.Add(new List<Route>() { route01, route02 });
                        }
                    }
                }
            }
            return seg2Pairs;
        }
        /// <summary>
        /// 倒角配对好的线段
        /// </summary>
        /// <param name="seg2Pairs"></param>
        /// <returns></returns>
        internal List<Arc2d> BatchChamfer(List<List<Route>> seg2Pairs)
        {
            List<Arc2d> result = new List<Arc2d>();
            foreach (var item in seg2Pairs)
            {
                Segment2d seg2d01 = item[0].Segment2d;
                Segment2d seg2d02 = item[1].Segment2d;

                Arc2d arc2d = seg2d01.Chamfer(ref seg2d02, GlobalData.Instance.ChamferRadius_num);
                if (arc2d.ArcLength > Precision_.TheShortestDistance && arc2d.AngleEndDeg - arc2d.AngleStartDeg >= 1)
                {
                    result.Add(arc2d);
                }
            }
            return result;
        }

        /// <summary>
        /// 用来记录该地库方案的道路网信息
        /// </summary>
        Guid Guid_BsmtRoutes = new Guid("1B626D45-F30F-4C7B-8595-E0A8B412CEF0");
        internal void SetEntity(Element ele, List<XYZ> xYZs)
        {
            Schema Schema_BsmtRoutes = Schema.Lookup(Guid_BsmtRoutes);
            if (Schema_BsmtRoutes == null)
            {
                SchemaBuilder schemaBulider = new SchemaBuilder(Guid_BsmtRoutes);

                schemaBulider.SetReadAccessLevel(AccessLevel.Public);
                schemaBulider.SetWriteAccessLevel(AccessLevel.Public);
                schemaBulider.SetSchemaName("BsmtInfo");
                schemaBulider.SetDocumentation("BsmtInfo");

                FieldBuilder routesPoint = schemaBulider.AddArrayField("BsmtInfo", typeof(XYZ));
                //routesPoint.SetUnitType(UnitType.UT_Length);

                Schema_BsmtRoutes = schemaBulider.Finish();
            }
            Entity entity = new Entity(Schema_BsmtRoutes);
            //entity.Set<IList<XYZ>>("BsmtInfo", xYZs, DisplayUnitType.DUT_DECIMAL_FEET);
            entity.Set<IList<XYZ>>("BsmtInfo", xYZs);
            using (Transaction trans = new Transaction(this.doc, "设置Entity"))
            {
                trans.Start();
                ele.SetEntity(entity);
                trans.Commit();
            }
        }
        internal void ReadEntity(Element ele, View nowView)
        {
            Schema Schema_BsmtRoutes = Schema.Lookup(Guid_BsmtRoutes);
            Entity entity = ele.GetEntity(Schema_BsmtRoutes);
            //IList<XYZ> xyzs = entity.Get<IList<XYZ>>("BsmtInfo", DisplayUnitType.DUT_DECIMAL_FEET);
            IList<XYZ> xyzs = entity.Get<IList<XYZ>>("BsmtInfo");

            CurveArray curveArray = new CurveArray();
            int count = xyzs.Count;
            int end = count - 2;
            for (int i = 0; i < count; i += 2)
            {
                curveArray.Append(Line.CreateBound(xyzs[i], xyzs[i + 1]) as Curve);
            }
            DetailCurveArray detailCurveArray = new DetailCurveArray();
            using (Transaction trans = new Transaction(doc, "creatDetailline"))
            {
                trans.Start();
                if (curveArray.Size > 0)
                    detailCurveArray = doc.Create.NewDetailCurveArray(nowView, curveArray);
                trans.Commit();
            }

            GraphicsStyle graphicsStyle = doc.GetGraphicsStyleByName("地库_主车道中心线");

            using (Transaction modifyLinestyle = new Transaction(doc, "modifyLinestyle"))
            {
                modifyLinestyle.Start();
                foreach (DetailCurve detailCurve in detailCurveArray)
                    detailCurve.LineStyle = graphicsStyle;

                modifyLinestyle.Commit();
            }
        }
        /// <summary>
        /// 倒角复原
        /// </summary>
        internal void ChamferRestore()
        {
            InitialUIinter initialUIinter = new InitialUIinter(this.uiApp);
            List<ElementId> selBaseWallIds = initialUIinter.SelBsmtWallIds(); // UI获取所有地库填充区域id
            List<ElemsViewLevel> elemsViewLevels = initialUIinter.ElemsViewLevels(); //一个视图对应一个层级

            foreach (ElemsViewLevel elemsViewLevel in elemsViewLevels)// 遍历单个视图
            {
                View nowView = elemsViewLevel.View;

                foreach (Bsmt bsmt in elemsViewLevel.Bsmts)// 遍历单个地库
                {
                    if (!selBaseWallIds.Contains(bsmt.BsmtBound.Id))// 判断是否UI选择
                        continue;

                    bsmt.DelRevitLines();
                    // 复原道路线
                    ReadEntity(bsmt.BsmtBound.Ele, nowView);
                }
            }

        }
    }
}
